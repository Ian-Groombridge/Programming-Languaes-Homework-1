#include <stdio.h>

struct Student {
    int SID;
    char* studentName;
    int enrolled;
};

int main()
{
    // Code for swapping by value and by reference
    int a = 5;
    int b = 10;
    printf("Int a = %d, Int b = %d before swap \n", a, b);
    swapByValue(a, b);
    printf("Int a = %d, Int b = %d after Swap by Value \n", a, b);
    swapByReference(&a, &b);
    printf("Int a = %d, Int b = %d after Swap by Reference \n", a, b);
    // Demonstration of struct class
    struct Student x, y;
    x.SID = 1;
    x.studentName = "Alice";
    x.enrolled = 1;
    y.SID = 2;
    y.studentName = "Bob";
    y.enrolled=0;
    struct Student studentBody[]= {x,y};
    printf("These are our students:\n");
    for (int i = 0; i<2; i++){
        printf("Student ID: %d\nStudent Name:%s\n", studentBody[i].SID, studentBody[i].studentName);
        // Demonstration of lack of booleans and how C interprets if statements with ints
        if (studentBody[i].enrolled)
            printf("Student is enrolled\n");
        else
            printf("Student is not enrolled\n");
    }
    // Demonstration of Dynamic allocation of memory
    int length =1;
    while(length>0){
        printf("Now we will make a string of random letters!\nEnter the length of the string: ");
        scanf("%d", &length);
        char* randWord =(char*) calloc(length, sizeof(char));
        for (int i = 0; i< length; i++){
            randWord[i] = 'A'  + (random() %26);
        }
        printf("Random string is: %s\nEnter a new number to continue or 0 to exit\n", randWord);
    }
}

void swapByValue (int a, int b) {
    int temp = a;
    a= b;
    b= temp;
}

void swapByReference (int *a, int *b){
    int temp = *a;
    *a = *b;
    *b = temp;
}
